{"title":"资源压缩与合并","date":"2019-01-31T16:00:00.000Z","slug":"resourceConsolidationAndCompression","comments":true,"tags":["Optimization"],"categories":["学习"],"updated":"2019-05-17T05:39:01.218Z","content":"<p>前端性能优化（一）：资源压缩与合并</p>\n<a id=\"more\"></a>\n<h2 id=\"意义和作用\">意义和作用<a href=\"post/resourceConsolidationAndCompression#意义和作用\"></a></h2><p>&emsp;&emsp;前端在发送http请求时，影响快慢的因素除了网络环境以外就是http的数量和http的大小，分别对应了合并与压缩。其中压缩主要是对代码中的无效（指浏览器对其的解析）字符以及注释进行删减，而合并必然导致http的请求变大，故在实际开发过程中要具体情况具体分析。</p>\n<h2 id=\"html、css、js的压缩与js的混乱\">html、css、js的压缩与js的混乱<a href=\"post/resourceConsolidationAndCompression#html、css、js的压缩与js的混乱\"></a></h2><p><strong>方法：</strong></p>\n<blockquote>\n<p>1.在线网站压缩</p>\n</blockquote>\n<p>&emsp;&emsp;通用：<a href=\"http://tool.oschina.net/jscompress/\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/jscompress/</a></p>\n<p>&emsp;&emsp;html压缩：<a href=\"https://tool.lu/html\" target=\"_blank\" rel=\"noopener\">https://tool.lu/html</a></p>\n<p>&emsp;&emsp;css压缩：<a href=\"https://tool.lu/css\" target=\"_blank\" rel=\"noopener\">https://tool.lu/css</a></p>\n<p>&emsp;&emsp;js压缩与混乱：<a href=\"https://tool.lu/js（除无效字符和注释之外，还有代码语义的缩减和优化，降低代码的可读性，来保障安全性）\" target=\"_blank\" rel=\"noopener\">https://tool.lu/js（除无效字符和注释之外，还有代码语义的缩减和优化，降低代码的可读性，来保障安全性）</a></p>\n<blockquote>\n<p>2.html-minifier工具（基于node）</p>\n</blockquote>\n<p>&emsp;&emsp;github源文件及使用教程：<a href=\"https://github.com/kangax/html-minifier\">https://github.com/kangax/html-minifier</a></p>\n<p>&emsp;&emsp;本人使用教程如下：</p>\n<p>&emsp;&emsp;注：不要用此工具直接压缩js或者css，亲测css不报错，当js中含&lt;、&gt;（eg：for语句）报错，否则不报错，看了源码，是因为其中包含了对标签的判断。安全起见，不改动源码，还是用专门压缩js和css的工具，比如uglifyJS和clean-css进行压缩吧。另外，在实际项目中，html文件压缩必要没有那么大，所以该部分可跳过。</p>\n<p>&emsp;&emsp;（1）单文件及字符串处理</p>\n<p>&emsp;&emsp;&emsp;&emsp;&ensp;在文件目录中创建文件condense.js如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var minify = require(&apos;html-minifier&apos;).minify;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(&apos;./index.html&apos;, &apos;utf8&apos;, function (err, data) &#123;</span><br><span class=\"line\">    if(err) &#123;</span><br><span class=\"line\">        throw err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fs.writeFile(&apos;./index_result.html&apos;, minify(data, &#123;</span><br><span class=\"line\">        //新增文件&apos;index_result.html&apos;并将压缩内容写入</span><br><span class=\"line\">        //改为&apos;index.html&apos;将覆盖重写原来的index.html</span><br><span class=\"line\">        //data即文件内容，可用实际字符串替换</span><br><span class=\"line\">        removeComments: true,//删除除script和style之外的注释</span><br><span class=\"line\">        collapseWhitespace: true//删除除script、style和testarea之外的多余空格</span><br><span class=\"line\">    &#125;), function () &#123;</span><br><span class=\"line\">        console.log(&apos;success&apos;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;&emsp;&emsp;在命令行中运行node condense.js即可</p>\n<p>&emsp;&emsp;（2）批量文件处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\">var minify = require(&apos;html-minifier&apos;).minify;</span><br><span class=\"line\">var join = require(&apos;path&apos;).join;</span><br><span class=\"line\"></span><br><span class=\"line\">function MinifyFile(path)&#123;</span><br><span class=\"line\">    let files = fs.readdirSync(path);</span><br><span class=\"line\">    files.forEach(function (item, index) &#123;</span><br><span class=\"line\">        let fPath = join(path,item);</span><br><span class=\"line\">        let stat = fs.statSync(fPath);</span><br><span class=\"line\">        if(stat.isDirectory() === true) &#123;</span><br><span class=\"line\">            MinifyFile(fPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (stat.isFile() === true) &#123;</span><br><span class=\"line\">          fs.readFile(fPath, &apos;utf8&apos;, function (err, data) &#123;</span><br><span class=\"line\">                if(err) &#123;</span><br><span class=\"line\">                    throw err;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(item.indexOf(&apos;.html&apos;) !== -1)&#123;</span><br><span class=\"line\">                    //若文件夹中既有html也有其他文件，必加此句判断，否则当遇到非html文件时，将会使所有的压缩出现问题，清空所有文件内容</span><br><span class=\"line\">                    fs.writeFile(fPath, minify(data, &#123;</span><br><span class=\"line\">                        removeComments: true,//删除除script和style之外的注释</span><br><span class=\"line\">                        collapseWhitespace: true,//删除除script、style和testarea之外的多余空格</span><br><span class=\"line\">                        minifyJS: true//压缩js</span><br><span class=\"line\">                    &#125;), function () &#123;</span><br><span class=\"line\">                        console.log(&apos;success&apos;);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MinifyFile(&quot;test&quot;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3.fis3工具</p>\n</blockquote>\n<p>&emsp;&emsp;首先在项目文件中添加fis-conf文件，内容为如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fis.match(&apos;*.js&apos;, &#123;</span><br><span class=\"line\">  optimizer: fis.plugin(&apos;uglify-js&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fis.match(&apos;*.css&apos;, &#123;</span><br><span class=\"line\">  optimizer: fis.plugin(&apos;clean-css&apos;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;然后运行cmd命令fis3 release -d ../output发布到目录../output下，output文件夹中的所有内容即为项目压缩后的。</p>\n<h2 id=\"资源的合并\">资源的合并<a href=\"post/resourceConsolidationAndCompression#资源的合并\"></a></h2><p><strong>方法：</strong></p>\n<blockquote>\n<p>1.在线网站合并</p>\n</blockquote>\n<p>&emsp;&emsp;通用：<a href=\"http://tool.oschina.net/jscompress/\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/jscompress/</a></p>\n<blockquote>\n<p>2.fis3工具</p>\n</blockquote>\n<p>&emsp;&emsp;（1）简单合并（不推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fis.match(&apos;::package&apos;, &#123;</span><br><span class=\"line\">  postpackager: fis.plugin(&apos;loader&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fis.match(&apos;*.css&apos;, &#123;</span><br><span class=\"line\">  packTo: &apos;/static/aio.css&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fis.match(&apos;*.js&apos;, &#123;</span><br><span class=\"line\">  packTo: &apos;/static/aio.js&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;（2）基于页面的合并<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fis.match(&apos;::package&apos;, &#123;</span><br><span class=\"line\">  postpackager: fis.plugin(&apos;loader&apos;, &#123;</span><br><span class=\"line\">    allInOne: true</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;运行之后，其对每一个html页面进行分析，将其依赖的文件合并成一个文件，各自保存在自动生成的pkg文件夹中。</p>\n<blockquote>\n<p>fis3只是举例，还有其他一些工具也可实现，另外，fis3是个前端构建工具，用处很多，不止本文介绍这些。</p>\n</blockquote>\n","prev":{"title":"npm4058报错","slug":"npmError(4058)"},"next":{"title":"http历程","slug":"httpHistory"},"link":"http://github.com/post/resourceConsolidationAndCompression/","toc":[{"title":"意义和作用","id":"意义和作用","index":"1"},{"title":"html、css、js的压缩与js的混乱","id":"html、css、js的压缩与js的混乱","index":"2"},{"title":"资源的合并","id":"资源的合并","index":"3"}]}