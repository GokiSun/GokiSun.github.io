{"title":"http缓存机制","date":"2019-03-18T16:00:00.000Z","slug":"httpCacheMechanism","comments":true,"tags":["Internet"],"categories":["学习"],"updated":"2019-05-17T06:07:37.095Z","content":"<p>&emsp;&emsp;在http网络请求中，缓存极大的减少了客户端的等待时间。一个http请求的报文包含了两部分，headers和body，headers用于存放附加信息，像cookie，缓存信息等；而body中则为我们所要传输的内容。</p>\n<a id=\"more\"></a>\n<h1 id=\"概述与分类\">概述与分类<a href=\"post/httpCacheMechanism#概述与分类\"></a></h1><p>&emsp;&emsp;无缓存时，发送http请求大致过程如下：</p>\n<div class=\"article-img\"><p><img src=\"/article-material/HttpCacheMechanism/1.png\" alt data-zoomable></p></div>\n<p>&emsp;&emsp;有缓存时，过程将稍有变化，而不同的缓存规则对应的过程也不相同，主要分为两类：</p>\n<p><strong>强制缓存、对比缓存（也叫协商缓存）</strong>。</p>\n<h1 id=\"强制缓存\">强制缓存<a href=\"post/httpCacheMechanism#强制缓存\"></a></h1><p>过程：</p>\n<div class=\"article-img\"><p><img src=\"/article-material/HttpCacheMechanism/2.png\" alt data-zoomable></p></div>\n<p>&emsp;&emsp;强制缓存通过headers中的<code>Cache-Control</code>字段来控制，其拥有以下一些属性：</p>\n<ul>\n<li>public(默认) -&gt; 可被任何对象（客户端、代理服务器等）缓存</li>\n<li>private -&gt; 只能被客户端缓存</li>\n<li>no-store -&gt; 不允许任何缓存</li>\n<li>max-age -&gt; 缓存有效时间</li>\n<li>no-cache -&gt; 使用对比缓存</li>\n<li>only-if-cached -&gt; 不适用对比缓存<br>&emsp;&emsp;在使用缓存且不使用对比缓存时，即为强制缓存。</li>\n</ul>\n<h1 id=\"对比缓存\">对比缓存<a href=\"post/httpCacheMechanism#对比缓存\"></a></h1><p>过程：</p>\n<div class=\"article-img\"><p><img src=\"/article-material/HttpCacheMechanism/3.png\" alt data-zoomable></p></div>\n<p>&emsp;&emsp;如图，对比缓存即在得到缓存之后，通过验证缓存是否有效，来决定是否使用缓存（虽然无论标识是否失效都要发送请求，但发送的仅是标识，比整个报文都发送要节省流量，故有可取之处）。而验证的方法有以下两种：</p>\n<h2 id=\"时间验证-Last-Modified-If-Modified-Since\">时间验证 Last-Modified/If-Modified-Since<a href=\"post/httpCacheMechanism#时间验证-Last-Modified-If-Modified-Since\"></a></h2><p>&emsp;&emsp;通过验证所请求资源在服务器上的最后修改时间是否相同。</p>\n<p>&emsp;&emsp;在第一次服务器响应请求时，除返回资源外，同时也返回了资源的最后修改时间，存于Response Headers中<code>Last-Modified</code>字段之中；而当第二次访问时，请求头用<code>If-Modified-Since</code>字段来保存上次的返回的时间，并发送到服务器进行对比，不同，返回状态码200和最新的资源；相同，则返回状态码304，告知客户端可以使用缓存。</p>\n<blockquote>\n<p>不可弥补的弊端：精确到秒，若比较时相差小于一秒，则无法返回最新资源。</p>\n</blockquote>\n<h2 id=\"标识验证-Etag-If-None-Match\">标识验证 Etag/If-None-Match<a href=\"post/httpCacheMechanism#标识验证-Etag-If-None-Match\"></a></h2><p>&emsp;&emsp;通过验证所请求资源在服务器上的唯一标识<code>Etag</code>（优先级高于<code>Last-Modified</code>）是否相同。</p>\n<p>&emsp;&emsp;在第一次服务器响应请求时，返回一个<code>Etag</code>唯一标识，其值当资源改变时发生变化，通过值是否相同来判断资源是否发生过变化。返回规则同上。</p>\n<blockquote>\n<p>优点不言而喻，但有人认为Etag的计算影响了服务器的性能，提倡不使用。</p>\n</blockquote>\n","prev":{"title":"js运行机制","slug":"jsOperatingMechanism"},"next":{"title":"jump","slug":"jump"},"link":"http://github.com/post/httpCacheMechanism/","toc":[{"title":"概述与分类","id":"概述与分类","index":"1"},{"title":"强制缓存","id":"强制缓存","index":"2"},{"title":"对比缓存","id":"对比缓存","index":"3","children":[{"title":"时间验证 Last-Modified/If-Modified-Since","id":"时间验证-Last-Modified-If-Modified-Since","index":"3.1"},{"title":"标识验证 Etag/If-None-Match","id":"标识验证-Etag-If-None-Match","index":"3.2"}]}]}